# coding: utf-8

"""
    Nncof_EventsSubscription

    Nncof_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.nf_status import NfStatus
from openapi_server.models.nf_type import NFType
from openapi_server.models.snssai import Snssai
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NfLoadLevelInformation(BaseModel):
    """
    Represents load level information of a given NF instance.
    """ # noqa: E501
    nf_type: Optional[NFType] = Field(default=None, alias="nfType")
    nf_instance_id: Optional[StrictStr] = Field(default=None, description="String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  ", alias="nfInstanceId")
    nf_set_id: Optional[StrictStr] = Field(default=None, description="NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  ", alias="nfSetId")
    nf_status: Optional[NfStatus] = Field(default=None, alias="nfStatus")
    nf_cpu_usage: Optional[StrictInt] = Field(default=None, alias="nfCpuUsage")
    nf_memory_usage: Optional[StrictInt] = Field(default=None, alias="nfMemoryUsage")
    nf_storage_usage: Optional[StrictInt] = Field(default=None, alias="nfStorageUsage")
    nf_load_level_average: Optional[StrictInt] = Field(default=None, alias="nfLoadLevelAverage")
    nf_load_levelpeak: Optional[StrictInt] = Field(default=None, alias="nfLoadLevelpeak")
    nf_load_avg_in_aoi: Optional[StrictInt] = Field(default=None, alias="nfLoadAvgInAoi")
    snssai: Optional[Snssai] = None
    confidence: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.")
    __properties: ClassVar[List[str]] = ["nfType", "nfInstanceId", "nfSetId", "nfStatus", "nfCpuUsage", "nfMemoryUsage", "nfStorageUsage", "nfLoadLevelAverage", "nfLoadLevelpeak", "nfLoadAvgInAoi", "snssai", "confidence"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NfLoadLevelInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nf_type
        if self.nf_type:
            _dict['nfType'] = self.nf_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nf_status
        if self.nf_status:
            _dict['nfStatus'] = self.nf_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snssai
        if self.snssai:
            _dict['snssai'] = self.snssai.to_dict()
        # set to None if nf_status (nullable) is None
        # and model_fields_set contains the field
        if self.nf_status is None and "nf_status" in self.model_fields_set:
            _dict['nfStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NfLoadLevelInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nfType": NFType.from_dict(obj.get("nfType")) if obj.get("nfType") is not None else None,
            "nfInstanceId": obj.get("nfInstanceId"),
            "nfSetId": obj.get("nfSetId"),
            "nfStatus": NfStatus.from_dict(obj.get("nfStatus")) if obj.get("nfStatus") is not None else None,
            "nfCpuUsage": obj.get("nfCpuUsage"),
            "nfMemoryUsage": obj.get("nfMemoryUsage"),
            "nfStorageUsage": obj.get("nfStorageUsage"),
            "nfLoadLevelAverage": obj.get("nfLoadLevelAverage"),
            "nfLoadLevelpeak": obj.get("nfLoadLevelpeak"),
            "nfLoadAvgInAoi": obj.get("nfLoadAvgInAoi"),
            "snssai": Snssai.from_dict(obj.get("snssai")) if obj.get("snssai") is not None else None,
            "confidence": obj.get("confidence")
        })
        return _obj


