# coding: utf-8

"""
    Nncof_EventsSubscription

    Nncof_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ThresholdLevel(BaseModel):
    """
    Represents a threshold level.
    """ # noqa: E501
    cong_level: Optional[StrictInt] = Field(default=None, alias="congLevel")
    nf_load_level: Optional[StrictInt] = Field(default=None, alias="nfLoadLevel")
    nf_cpu_usage: Optional[StrictInt] = Field(default=None, alias="nfCpuUsage")
    nf_memory_usage: Optional[StrictInt] = Field(default=None, alias="nfMemoryUsage")
    nf_storage_usage: Optional[StrictInt] = Field(default=None, alias="nfStorageUsage")
    avg_traffic_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ", alias="avgTrafficRate")
    max_traffic_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ", alias="maxTrafficRate")
    min_traffic_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ", alias="minTrafficRate")
    agg_traffic_rate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". ", alias="aggTrafficRate")
    var_traffic_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="string with format 'float' as defined in OpenAPI.", alias="varTrafficRate")
    avg_packet_delay: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds. ", alias="avgPacketDelay")
    max_packet_delay: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds. ", alias="maxPacketDelay")
    var_packet_delay: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="string with format 'float' as defined in OpenAPI.", alias="varPacketDelay")
    avg_packet_loss_rate: Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]] = Field(default=None, description="Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent. ", alias="avgPacketLossRate")
    max_packet_loss_rate: Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]] = Field(default=None, description="Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent. ", alias="maxPacketLossRate")
    var_packet_loss_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="string with format 'float' as defined in OpenAPI.", alias="varPacketLossRate")
    svc_exp_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="string with format 'float' as defined in OpenAPI.", alias="svcExpLevel")
    speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="string with format 'float' as defined in OpenAPI.")
    __properties: ClassVar[List[str]] = ["congLevel", "nfLoadLevel", "nfCpuUsage", "nfMemoryUsage", "nfStorageUsage", "avgTrafficRate", "maxTrafficRate", "minTrafficRate", "aggTrafficRate", "varTrafficRate", "avgPacketDelay", "maxPacketDelay", "varPacketDelay", "avgPacketLossRate", "maxPacketLossRate", "varPacketLossRate", "svcExpLevel", "speed"]

    @field_validator('avg_traffic_rate')
    def avg_traffic_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/")
        return value

    @field_validator('max_traffic_rate')
    def max_traffic_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/")
        return value

    @field_validator('min_traffic_rate')
    def min_traffic_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/")
        return value

    @field_validator('agg_traffic_rate')
    def agg_traffic_rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$", value):
            raise ValueError(r"must validate the regular expression /^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ThresholdLevel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ThresholdLevel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "congLevel": obj.get("congLevel"),
            "nfLoadLevel": obj.get("nfLoadLevel"),
            "nfCpuUsage": obj.get("nfCpuUsage"),
            "nfMemoryUsage": obj.get("nfMemoryUsage"),
            "nfStorageUsage": obj.get("nfStorageUsage"),
            "avgTrafficRate": obj.get("avgTrafficRate"),
            "maxTrafficRate": obj.get("maxTrafficRate"),
            "minTrafficRate": obj.get("minTrafficRate"),
            "aggTrafficRate": obj.get("aggTrafficRate"),
            "varTrafficRate": obj.get("varTrafficRate"),
            "avgPacketDelay": obj.get("avgPacketDelay"),
            "maxPacketDelay": obj.get("maxPacketDelay"),
            "varPacketDelay": obj.get("varPacketDelay"),
            "avgPacketLossRate": obj.get("avgPacketLossRate"),
            "maxPacketLossRate": obj.get("maxPacketLossRate"),
            "varPacketLossRate": obj.get("varPacketLossRate"),
            "svcExpLevel": obj.get("svcExpLevel"),
            "speed": obj.get("speed")
        })
        return _obj


