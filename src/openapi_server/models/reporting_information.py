# coding: utf-8

"""
    Nncof_EventsSubscription

    Nncof_EventsSubscription Service API.   Â© 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from datetime import datetime
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    field_serializer,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.muting_exception_instructions import (
    MutingExceptionInstructions,
)
from openapi_server.models.muting_notifications_settings import (
    MutingNotificationsSettings,
)
from openapi_server.models.notification_flag import NotificationFlag
from openapi_server.models.notification_method import NotificationMethod
from openapi_server.models.partitioning_criteria import PartitioningCriteria

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ReportingInformation(BaseModel):
    """
    Represents the type of reporting that the subscription requires.
    """  # noqa: E501

    imm_rep: Optional[StrictBool] = Field(default=None, alias="immRep")
    notif_method: Optional[NotificationMethod] = Field(
        default=None, alias="notifMethod"
    )
    max_report_nbr: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(
        default=None,
        description="Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.",
        alias="maxReportNbr",
    )
    mon_dur: Optional[datetime] = Field(
        default=None,
        description="string with format 'date-time' as defined in OpenAPI.",
        alias="monDur",
    )
    rep_period: Optional[StrictInt] = Field(
        default=None, description="indicating a time in seconds.", alias="repPeriod"
    )
    samp_ratio: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(
        default=None,
        description="Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.  ",
        alias="sampRatio",
    )
    partition_criteria: Optional[
        Annotated[List[PartitioningCriteria], Field(min_length=1)]
    ] = Field(
        default=None,
        description="Criteria for partitioning the UEs before applying the sampling ratio.",
        alias="partitionCriteria",
    )
    grp_rep_time: Optional[StrictInt] = Field(
        default=None, description="indicating a time in seconds.", alias="grpRepTime"
    )
    notif_flag: Optional[NotificationFlag] = Field(default=None, alias="notifFlag")
    notif_flag_instruct: Optional[MutingExceptionInstructions] = Field(
        default=None, alias="notifFlagInstruct"
    )
    muting_setting: Optional[MutingNotificationsSettings] = Field(
        default=None, alias="mutingSetting"
    )
    __properties: ClassVar[List[str]] = [
        "immRep",
        "notifMethod",
        "maxReportNbr",
        "monDur",
        "repPeriod",
        "sampRatio",
        "partitionCriteria",
        "grpRepTime",
        "notifFlag",
        "notifFlagInstruct",
        "mutingSetting",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ReportingInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of notif_method
        if self.notif_method:
            _dict["notifMethod"] = self.notif_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in partition_criteria (list)
        _items = []
        if self.partition_criteria:
            for _item in self.partition_criteria:
                if _item:
                    _items.append(_item.to_dict())
            _dict["partitionCriteria"] = _items
        # override the default output from pydantic by calling `to_dict()` of notif_flag
        if self.notif_flag:
            _dict["notifFlag"] = self.notif_flag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notif_flag_instruct
        if self.notif_flag_instruct:
            _dict["notifFlagInstruct"] = self.notif_flag_instruct.to_dict()
        # override the default output from pydantic by calling `to_dict()` of muting_setting
        if self.muting_setting:
            _dict["mutingSetting"] = self.muting_setting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ReportingInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "immRep": obj.get("immRep"),
                # "notifMethod": NotificationMethod.from_dict(obj.get("notifMethod")) if obj.get("notifMethod") is not None else None,
                "notifMethod": (
                    obj.get("notifMethod")
                    if obj.get("notifMethod") is not None
                    else None
                ),
                "maxReportNbr": obj.get("maxReportNbr"),
                "monDur": obj.get("monDur"),
                "repPeriod": obj.get("repPeriod"),
                "sampRatio": obj.get("sampRatio"),
                "partitionCriteria": (
                    # [
                    #     PartitioningCriteria.from_dict(_item)
                    #     for _item in obj.get("partitionCriteria")
                    # ]
                    obj.get("partitionCriteria")
                    if obj.get("partitionCriteria") is not None
                    else None
                ),
                "grpRepTime": obj.get("grpRepTime"),
                "notifFlag": (
                    # NotificationFlag.from_dict(obj.get("notifFlag"))
                    obj.get("notifFlag")
                    if obj.get("notifFlag") is not None
                    else None
                ),
                "notifFlagInstruct": (
                    MutingExceptionInstructions.from_dict(obj.get("notifFlagInstruct"))
                    if obj.get("notifFlagInstruct") is not None
                    else None
                ),
                "mutingSetting": (
                    MutingNotificationsSettings.from_dict(obj.get("mutingSetting"))
                    if obj.get("mutingSetting") is not None
                    else None
                ),
            }
        )
        return _obj

    @field_serializer("mon_dur")
    def serialize_mon_dur(self, value, _info):
        return value.timestamp()
