# coding: utf-8

"""
    Nncof_EventsSubscription

    Nncof_EventsSubscription Service API.   © 2025, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.event_notification import EventNotification
from openapi_server.models.event_subscription import EventSubscription
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NncofEventsSubscription(BaseModel):
    """
    Represents an Individual NCOF Event Subscription resource.
    """ # noqa: E501
    event_subscriptions: Annotated[List[EventSubscription], Field(min_length=1)] = Field(description="Subscribed events", alias="eventSubscriptions")
    notification_uri: Optional[StrictStr] = Field(default=None, description="String providing an URI formatted according to RFC 3986.", alias="notificationURI")
    notif_corr_id: Optional[StrictStr] = Field(default=None, description="Notification correlation identifier.", alias="notifCorrId")
    supported_features: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. ", alias="supportedFeatures")
    event_notifications: Optional[Annotated[List[EventNotification], Field(min_length=0)]] = Field(default=None, alias="eventNotifications")
    fail_event_reports: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, alias="failEventReports")
    prev_sub: Optional[StrictStr] = Field(default=None, alias="prevSub")
    cons_nf_info: Optional[StrictStr] = Field(default=None, alias="consNfInfo")
    __properties: ClassVar[List[str]] = ["eventSubscriptions", "notificationURI", "notifCorrId", "supportedFeatures", "eventNotifications", "failEventReports", "prevSub", "consNfInfo"]

    @field_validator('supported_features')
    def supported_features_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Fa-f0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[A-Fa-f0-9]*$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NncofEventsSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in event_subscriptions (list)
        _items = []
        if self.event_subscriptions:
            for _item in self.event_subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eventSubscriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in event_notifications (list)
        _items = []
        if self.event_notifications:
            for _item in self.event_notifications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eventNotifications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NncofEventsSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventSubscriptions": [EventSubscription.from_dict(_item) for _item in obj.get("eventSubscriptions")] if obj.get("eventSubscriptions") is not None else None,
            "notificationURI": obj.get("notificationURI"),
            "notifCorrId": obj.get("notifCorrId"),
            "supportedFeatures": obj.get("supportedFeatures"),
            "eventNotifications": [EventNotification.from_dict(_item) for _item in obj.get("eventNotifications")] if obj.get("eventNotifications") is not None else None,
            "failEventReports": obj.get("failEventReports"),
            "prevSub": obj.get("prevSub"),
            "consNfInfo": obj.get("consNfInfo")
        })
        return _obj
